{"version":3,"sources":["libs/canUseWebp.ts"],"names":[],"mappings":"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","file":"canUseWebp.js","sourcesContent":["//Изначально в html все картинки должны быть в webp. А потом этот скрипт поменяет их на старые расширения если webp не поддерживается ос или браузером\n//Картинки должны быть изначально в webp, иначе Google PageSpeed их не увидит, если их вставить после загрузки dom\n\n//Определяем ОС\nconst OS = (() => {\n    const platform = navigator.platform.toLowerCase(),\n        iosPlatforms = ['iphone', 'ipad', 'ipod', 'ipod touch'];\n\n    if (platform.includes('mac')) return 'MacOS';\n    if (iosPlatforms.includes(platform)) return 'iOS';\n    if (platform.includes('win')) return 'Windows';\n    if (/android/.test(navigator.userAgent.toLowerCase())) return 'Android';\n    if (/linux/.test(platform)) return 'Linux';\n\n    return 'unknown';\n})();\n\n// Функция проверки поддержки браузером формата webp\nconst canUseWebp = function () {\n    // Создаем элемент canvas\n    let elem = document.createElement('canvas');\n    // Приводим элемент к булеву типу\n    if (!!(elem.getContext && elem.getContext('2d'))) {\n        // Создаем изображение в формате webp, возвращаем индекс искомого элемента и сразу же проверяем его\n        return elem.toDataURL('image/webp').indexOf('data:image/webp') == 0;\n    }\n    // Иначе Webp не используем\n\n    return false;\n}()\n\n// // Устанавливаем тэгу html класс webp или no-webp, чтобы в стилях ставить нужные картинки\nconst setClassToBody = (() => {\n    document.documentElement;\n    //Ставим webp класс только если браузер поддерживает и ОС не MacOS\n    if (canUseWebp && OS != \"MacOS\") {\n        document.documentElement.classList.add('webp')\n        document.documentElement.classList.remove('no-webp')\n    } else {\n        document.documentElement.classList.add('no-webp')\n        document.documentElement.classList.remove('webp')\n    }\n})();\n// //Изначально в вёрстке все картинки в webp. В каждой подпапке webp-картинки в папке webp. Если браузер не поддерживает webp, то скрипт ставит тэгам img и image src и href на картинку на уровень выше и расширение ставит из атрибута data-ext\n\n\n\n\n//функция будем менять директории файлов для тэгов на такие, чтоб без webp\n// в attr будет установлена новый путь до картинки (jpg или png)\nfunction iterateTags(tagsList, attr) {\n\n    tagsList.forEach((item, index) => {\n        //item - это элемент img в ДОМе\n        const dataSrc = item.getAttribute('data-src');\n\n        const noExtReg = /[^.]*/; // даёт всё до точки\n        let noExt = dataSrc.match(noExtReg)[0];\n\n        console.log(noExt);\n\n\n\n\n\n    })\n}\n\n\n\n//проверяем поддержку webp и меняем src на путь без webp, если бразуер не поддерживает webp\n//все тэги, для которых будем менять источник изображения, если браузер НЕ поддерживает webp находятся в массиве selectors\nexport function cancelWebp(selectorList = ['img']) {\n\n    if (!canUseWebp || OS == 'MacOS' || document.documentElement.classList.contains('no-webp')) {\n\n        selectorList.forEach((selector, index) => {\n            const elements = document.querySelectorAll(`${selector}[data-src]`); //это сами элементыв ДОМе\n\n            iterateTags(elements, 'data-src'); //ставим data-src, чтобы потом lazyLoad.js сработал\n        })\n\n        //если webp не поддерживается\n\n\n    }\n    else { console.log('canUseWebp!') }\n\n}\n"]}