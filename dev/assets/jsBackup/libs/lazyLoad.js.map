{"version":3,"sources":["libs/lazyLoad.ts"],"names":[],"mappings":";;;AAAA,SAAgB,QAAQ,CACpB,QAAuB;AACvB,mEAAmE;AACnE,QAAqB,EAAE,gDAAgD;AACvE,MAKC;IARD,yBAAA,EAAA,uBAAuB;IAEvB,yBAAA,EAAA,qBAAqB;IACrB,uBAAA,EAAA;QACI,UAAU,EAAE,kBAAkB;QAC9B,SAAS,EAAE,CAAC;KAGf;IAID,2CAA2C;IAC3C,uBAAuB;IACvB,IAAI,QAAQ,GAAG,IAAI,oBAAoB,CAAC,UAAU,OAAO,EAAE,IAAI;QAC3D,sCAAsC;QACtC,SAAS,YAAY,CAAC,EAAE;YACpB,IAAM,IAAI,GAAG,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YACvC,EAAE,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA;QAEhC,CAAC;QAED,0BAA0B;QAC1B,OAAO,CAAC,OAAO,CAAC,UAAA,KAAK;YACjB,yDAAyD;YACzD,6DAA6D;YAE7D,8BAA8B;YAE9B,IAAI,KAAK,CAAC,cAAc,EAAE;gBAEtB,wDAAwD;gBACxD,oBAAoB;gBACpB,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAC3B,sDAAsD;gBACtD,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;aAChC;QACL,CAAC,CAAC,CAAC;IACP,CAAC,EAAE,MAAM,CAAC,CAAC;IAEX,IAAM,IAAI,GAAG,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IACjD,IAAI,CAAC,OAAO,CAAC,UAAA,GAAG;QACZ,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAC1B,CAAC,CAAC,CAAC;AACP,CAAC;AA7CD,4BA6CC","file":"lazyLoad.js","sourcesContent":["export function lazyLoad(\n    selector = '[data-src]',\n    //берём все элементы с этим селектором и применяем к ним lazyLoad, \n    dataAttr = 'data-src', //здесь хранится истинный путь до картинки/видео\n    config = {\n        rootMargin: '0px 0px 50px 0px',\n        threshold: 0,\n\n        // rootMargin и threshold - это два свойства, предоставляемые интерфейсом\n    }\n) {\n\n\n    // регистрируем объект config с экземпляром\n    // intersectionObserver\n    let observer = new IntersectionObserver(function (entries, self) {\n        //функция замены src на нужный атрибут\n        function preloadImage(el) {\n            const attr = el.getAttribute(dataAttr);\n            el.setAttribute('src', attr)\n\n        }\n\n        // перебираем все элементы\n        entries.forEach(entry => {\n            // обрабатываем только изображения, которые пересекаются.\n            // isIntersecting - это свойство, предоставляемое интерфейсом\n\n            //entry.target - сама картинка\n\n            if (entry.isIntersecting) {\n\n                // пользовательская функция, которая копирует путь к img\n                // из data-src в src\n                preloadImage(entry.target);\n                // теперь изображение размещено, прекращаем наблюдение\n                self.unobserve(entry.target);\n            }\n        });\n    }, config);\n\n    const imgs = document.querySelectorAll(selector);\n    imgs.forEach(img => {\n        observer.observe(img);\n    });\n}\n\n"]}