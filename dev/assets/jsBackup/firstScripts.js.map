{"version":3,"sources":["firstScripts.ts"],"names":[],"mappings":";;AAAA,8CAA+C;AAC/C,qDAAqD;AACrD,iDAAiD;AAEjD,6CAA6C;AAC7C,uEAAuE;AACvE,gGAAgG;AAGhG,QAAQ,CAAC,gBAAgB,CAAC,kBAAkB,EAAE;IAE3C;;;;;;;;;;;;;;GAcD;IAKF,kKAAkK;IAClK,4DAA4D;IAC5D,qDAAqD;IACrD,+FAA+F;IAC/F,4GAA4G;IAIxG,kCAAkC;IAClC,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAC,CAAC;QAEjC,kCAAkC;QAClC,IAAI,CAAC,CAAC,OAAO,IAAI,GAAG,EAAE;YAClB,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YACnB,CAAC,CAAC,cAAc,EAAE,CAAC;YACnB,OAAO,KAAK,CAAC;SAChB;IAEL,CAAC,CAAC,CAAA;IAEF,2BAA2B;IAE3B,IAAM,YAAY,GAAG,IAAI,uBAAW,CAAC;QACjC,mBAAmB,EAAE,SAAS;QAC9B,YAAY,EAAE,cAAc;QAC5B,cAAc,EAAE,MAAM;QACtB,cAAc,EAAE,QAAQ;QACxB,WAAW,EAAE,MAAM;QACnB,IAAI,EAAE,OAAO;QACb,UAAU,EAAE,0BAA0B;QACtC,QAAQ,EAAE,wBAAwB;KACrC,CAAC,CAAC;IAGH,kGAAkG;IAClG,6CAA6C;IAC7C,UAAU,EAAE,CAAC;IAEb,6BAA6B;IAC7B,QAAQ,EAAE,CAAC;IAGX,SAAS,GAAG;IAEZ,CAAC;AAGL,CAAC,CAAC,CAAC","file":"firstScripts.js","sourcesContent":["import { MenuToggler } from './libs/burger.ts';\n// import { cancelWebp } from './libs/canUseWebp.ts';\n// import { lazyLoad } from './libs/lazyLoad.ts';\n\n//import {myFunc} from './modules/myFunc.js';\n//то что здесь импортируется, в этих файлах перед ними поставлен export\n//но эти импортированные переменные, функции и т.д. доступны ТОЛЬКО ЗДЕСЬ. в html они недоступны\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n\n   /* это нужно чтобы сделать эти функции видимыми в глобальной обл переменных в самом файле html \n  (в его инлайновый тэгах скрипта), а также\n  когда php рендерит элементы с onclick=toggleSubfolders, он их рендерит в html файл, поэтому\n  функции должны существовать в пространстве имён самого html.\n\n  экспорт из отдельных файлов и импорт этих функций сюда НЕ отправляет функции в обл переменных в html, в html эти функции недоступны.\n  поэтому надо их привоить в Window, а в html/php вызывать новый функции (myToggleSubfolders etc)\n\n window.myImportedFunc = function(elem) {\n    myFunc(elem);\n  }\n  window.showAudioFiles = function(elem) {\n    showAudioFiles(elem);\n  } \n*/\n    \n\n\n\n//чтобы transition не отрабатывал сначала (это я про то как элементы стоят на странице, а потом плавно исчезают из-за того что у них в css transition проставлено:\n//вот как с этим бороться: в css не установлено transition: \n//а ставится оно в js после события DomContentLoaded:\n//такимо бразом оно не будет исчезать при первой загрузке, но будет вести себя правильно дальше\n//и лучше не использовать display: none и visibility: hidden, вместо них лучше поставить большой z-index: -9\n\n\n\n    //отключаем перезагрузку стр на F5\n    window.addEventListener('keydown', (e) => {\n\n        //отключаем перезагрузку стр на F5\n        if (e.keyCode == 116) {\n            console.log(e.key);\n            e.preventDefault();\n            return false;\n        }\n\n    })\n\n    //инициализация Бургер Меню\n\n    const menuToggler1 = new MenuToggler({\n        menuTriggerSelector: '.burger', //if burger, to onClick add class burger_close\n        menuSelector: '.mobile-menu',\n        transitionTime: '0.5s',\n        transitionType: 'linear',\n        menuDisplay: 'flex',\n        type: 'slide', //appear OR slide, appear by default\n        slideBegin: 'translate(270px, -200px)', // Обязательно добавлять px к любому числу (НЕ ДОЛЖНО БЫТЬ ТОЧКО С ЗАПЯТОЙ)\n        slideEnd: 'translate(0px, -200px)',  // Обязательно добавлять px к любому числу (НЕ ДОЛЖНО БЫТЬ ТОЧКО С ЗАПЯТОЙ)\n    });\n\n\n    //проверяем поддержку WEBP и меняем src у img на значенеи из data-ext, если не поддерживается WEBP\n    //отменяем webp, если браузер не поддерживает\n    cancelWebp();\n\n    //подключаем ленивую загрузку\n    lazyLoad();\n\n\n    function add() {\n\n    }\n\n\n});\n"]}